{
    "type": [
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        2
    ],
    "data": [
        "\nR version 4.1.1 (2021-08-10) -- \"Kick Things\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR es un software libre y viene sin GARANTIA ALGUNA.\nUsted puede redistribuirlo bajo ciertas circunstancias.\nEscriba 'license()' o 'licence()' para detalles de distribucion.\n\nR es un proyecto colaborativo con muchos contribuyentes.\nEscriba 'contributors()' para obtener más información y\n'citation()' para saber cómo citar R o paquetes de R en publicaciones.\n\nEscriba 'demo()' para demostraciones, 'help()' para el sistema on-line de ayuda,\no 'help.start()' para abrir el sistema de ayuda HTML con su navegador.\nEscriba 'q()' para salir de R.\n\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(modgeom)",
        "Loading required package: tiff\n",
        "Loading required package: tensorA\n",
        "\nAttaching package: ‘tensorA’\n\n",
        "The following object is masked from ‘package:base’:\n\n    norm\n\n",
        "> ",
        "example(bspline_eval)",
        "\nbspln_> options(scipen = 5)\n\nbspln_> par(mgp=c(2.4,1,.4))\n\nbspln_> par(mar=c(4,5,2.5,2)+0.1) \n\nbspln_> par(cex=.9)\n\nbspln_> # clamped B-spline evaluation (open) --------------------\nbspln_> knot_number <- 10\n\nbspln_> # the graphical function\nbspln_> test_spline <- function(xseq, user_knots, p, \nbspln_+                         sup = bspline_support(p, knots=user_knots)  ){\nbspln_+   \nbspln_+   bbasis <- bspline_eval(xseq, degree=p, U=sup, native=TRUE)\nbspln_+   \nbspln_+   for(i in 1:ncol(bbasis)){\nbspln_+     if(i == 1){\nbspln_+       plot(xseq, bbasis[,1], type = \"l\", main=paste(\"p = \",p, sep=\"\"),\nbspln_+            ylab = \"B(x)\", xlab=\"x\", xaxt=\"n\", ylim=c(0,1))      \nbspln_+     }else{\nbspln_+       points(xseq, bbasis[,i], type = \"l\")\nbspln_+     }\nbspln_+   }\nbspln_+   \nbspln_+   for(i in 1:length(sup))\nbspln_+     lines(c(sup[i],sup[i]),c(0,1), lty=\"dotted\")\nbspln_+   \nbspln_+   #axis(1, at=sup, labels=sup)\nbspln_+   sup.lab <- round(sup, digits=2)\nbspln_+   axis(1, at=sup, labels=FALSE)#sup.lab)\nbspln_+   text(x=sup, y=par()$usr[3]-0.09*(par()$usr[4]-par()$usr[3]),\nbspln_+        labels=sup.lab, srt=45, adj=1, xpd=TRUE)\nbspln_+   \nbspln_+ }",
        "\n\nbspln_> # choose the polinomial degree that you wish \nbspln_> # splines will be evaluated from 0 to p\nbspln_> p <- 11\n\nbspln_> # the sequence of evaluation\nbspln_> xseq <- seq(from = 0, to = 1, length.out = 200);\n\nbspln_> # the knots\nbspln_> user_knots <- c(0,sort(runif(knot_number)),1)\n\nbspln_> # the chart generation\nbspln_> par(mfrow=c(2,3))\n\nbspln_> for(j in 0:p) test_spline(xseq, user_knots, j)\n",
        "<Enter> para ver el próximo gráfico: ",
        "",
        "<Enter> para ver el próximo gráfico: ",
        "",
        "\nbspln_> rm(j)\n\nbspln_> # periodic B-spline evaluation (closed) ---------------------------------\nbspln_> # the degree \nbspln_> p <- 11\n\nbspln_> # the sequence of evaluation\nbspln_> xseq <- seq(from = 0, to = 0.99999, length.out = 200);\n\nbspln_> # the knots\nbspln_> user_knots <- sort(c(0,sort(runif(knot_number)),1))\n\nbspln_> par(mfrow=c(2,3))\n\nbspln_> for(j in 0:p){ \nbspln_+   sup <- bspline_support(j, knots=user_knots, native=TRUE)\nbspln_+   sup_per <- transform_support_periodic(degree = j, U = sup, native=TRUE)\nbspln_+   test_spline(xseq, NULL, j, sup=sup_per)\nbspln_+ }",
        "\n",
        "<Enter> para ver el próximo gráfico: ",
        "",
        "<Enter> para ver el próximo gráfico: ",
        "",
        "\nbspln_> rm(j)\n",
        "> ",
        "load(\"data/bspline_uz_turns_data\") # comes from the processing in bspline2_test8 example.",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_uz_sign_example1.R\")",
        "[1] \"solving footpoints ... \"\n[1] \"finding approximations to turns ...\"\n[1] \"finding turns (for real) ...\"\n[1] \"procedure lasted:  3.38354873657227\"\n",
        "The following objects are masked _by_ .GlobalEnv:\n\n    points, u\n\n",
        "Loading required package: rgl\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_solve_example1.R\")",
        "[1] \"projection angles ***\"\n   [1]  88.870561  29.204541  32.841182  40.368108  87.720326  63.954305  39.321296\n   [8]  74.926657 120.821708 165.916425  32.192401 119.447672  65.995008 147.192991\n  [15] 136.896849  57.039136  72.842026  67.111240  98.249736  71.165563  44.403287\n  [22]  38.979106 140.855036  89.267924  76.883546  23.819353 124.927423 127.770333\n  [29] 155.156679 117.922444  47.224875 123.197521 111.792195  83.519053 115.227340\n  [36]  91.429995 115.571343 130.194800  37.495396  54.068052 123.159146",
        "  39.325569\n  [43] 146.009396  70.452395  32.329618  69.429188  88.950849  59.019003  39.235512\n  [50] 115.205810 130.680875 110.432324 127.858378  95.521761 138.281744  70.288343\n  [57] 139.239327  90.351671  85.193371  41.623571  78.595880  24.972869 126.841387\n  [64]  55.932377  97.669788 126.065361 163.451426  57.647422 129.288873 104.799068\n  [71]  79.022951 109.477818 140.496231  21.527955  72.675485 110.927511  63.808331\n  [78] 168.175555  85.840380  83.863792 125.507866  60.623737 154.520605  76.686655",
        "\n  [85]  80.636326 137.008708  89.087359  77.161433  45.388779 155.400603  54.618745\n  [92] 121.388809 106.604602 116.379381  71.092422  17.310361 136.726480  64.008864\n  [99]  45.260958  72.460600 137.869481  81.645602 171.527378 117.497731  77.507597\n [106]  80.138578  29.209816  40.557139  81.356285 139.439609  89.060617  63.055274\n [113]  94.132890 131.273530 119.796185  80.574170 122.096836 106.592497  24.015885\n [120]  38.186140 112.661158 122.133642  82.937172  69.587637 134.549470 143.779290\n [127]  86.848041",
        "  49.906477 133.995695 112.404818  60.127186  91.799708  83.265477\n [134]  72.019406  84.381934  48.980046  89.240144 115.599310  57.324795  26.334087\n [141]  79.202092   8.776946  80.642029  90.015961  87.054949 103.490659  46.357658\n [148]  45.383549 131.259822 144.707749  76.299687  84.837523  17.848619   9.374575\n [155]  50.054080  75.254174 129.796957  81.151549  56.402748 108.443839  37.457985\n [162]  20.863408 122.886864  58.662911  62.149243  51.092932 103.188766 169.457411\n [169] 135.648482  52.846434",
        " 116.622382 108.394526 103.499613 123.701122  75.222006\n [176]  47.717620 110.873152 125.475400 124.529120  57.818427  66.230105  66.256267\n [183]  69.134644 115.724134 155.687676  69.028148 112.466852  97.825539  60.178506\n [190] 160.844747 135.176604  56.726979  44.223580 141.158023 123.527807  61.835405\n [197]  79.353068  63.472628  80.389257 122.198481  97.849264 130.198821  64.668104\n [204]  68.918774 153.796072 108.619327  67.392772  62.727415 151.342329 109.093430\n [211]  33.338312 108.024591 136.586284",
        " 126.128551 129.310967  76.576059  24.318002\n [218] 116.278286  50.352388  86.073971 128.969236  16.055044  74.305935 128.054170\n [225] 111.959148 115.925555 112.190221 142.339040 144.136858  66.559410 118.625450\n [232]  90.649565  60.997984  80.230846  32.820984 114.489389  52.226168  18.278565\n [239]  34.588697  74.572017  86.933924  17.034151  91.465716  59.167782 119.346936\n [246]  87.282867  53.979579 130.526901 129.466828  57.168102  86.688795 129.666839\n [253] 113.449299 138.653152 112.386347  58.199227",
        "  37.145143 152.010434  67.017815\n [260]  73.472389 141.983616  57.110992 108.102628 133.006664 156.705877  71.126525\n [267]  43.382291 114.768527  66.194715  24.863233  98.268247 153.129715  60.040927\n [274] 111.545055  27.429747 147.886233  92.242676 153.600664  81.401604 160.322425\n [281]  64.318320  90.290685 105.043261 154.961225  81.127557  89.084811 108.625767\n [288]  93.755866  51.148665  88.244323  85.355439  84.023312  41.745563  47.595146\n [295] 135.349561  89.691597 153.771343  84.612617  84.040057",
        "  93.636096 134.783254\n [302]  76.565744  66.823979  77.305013  82.060745 130.981852  78.772154 160.463538\n [309]  50.098980  56.892825 108.039978 135.940525  43.310787 101.018563  40.198052\n [316]  75.984504 164.527302 130.036657 119.874867 144.379784  51.788415 138.314272\n [323] 177.666833 106.064659 116.197677 110.190726 128.403975 134.168261 105.128874\n [330]  50.280035  65.773845 167.214942  83.127625 124.829557 142.534161 106.748321\n [337]  77.151363 103.843122  47.223450 106.643373  94.250733  96.854750",
        " 151.367138\n [344]  51.724713 138.953322 158.610104  84.777141 148.405954 133.650151  96.183378\n [351]  99.622458 123.822746  71.751791  59.108061  69.969434 110.034861  91.285690\n [358]  62.378220 132.383523 128.435725  66.105697  51.656501  14.056310 174.336408\n [365] 118.660807 147.316043 115.707716  28.790050  38.873109 139.252807  71.300872\n [372]  37.235769  67.454579  81.058197  86.253827  77.380963 112.548938  66.380610\n [379]  72.990649 147.113294  70.478660  59.570761  63.556603  70.921387 125.883006",
        "\n [386] 132.898487 122.101052  47.736418 150.775576  18.629431  43.010006  88.586326\n [393] 124.520859  20.747327 148.339038 154.012712  97.689801  39.555271  23.283318\n [400] 142.667952  64.267145 157.741872 139.202381 128.610011  89.067339   4.111533\n [407]  51.983969 133.174500  25.172847 122.502043  53.422888   1.942553  48.900475\n [414] 151.764123 121.577300  24.303757 126.271375 148.572881  66.322555 131.351088\n [421]  90.892653  58.012739 112.552509  94.956519 158.877178  92.953924  67.022399\n [428] 142.139339",
        "  85.621518  31.455017 101.227535 160.172628  95.936695  84.117491\n [435]  54.963188  14.371243  52.758424  41.549893 164.425224 131.095874 108.097215\n [442]  36.104695 150.188578 118.169455  32.882101 125.878435  33.517735  46.477243\n [449]  73.261134  91.067903 101.365868 116.360592  56.333642  72.751825 109.471883\n [456] 117.815008  60.724683  84.817695  31.613296  71.075197  49.873827 106.250540\n [463] 156.586604  78.042987  44.857942  98.349649 135.614092 144.168275 139.372630\n [470] 108.095161  92.234330",
        " 126.264300  76.740764 145.826498 124.368920  96.270497\n [477]  58.705484 122.904395  91.431275 105.459303 126.809409  50.681809  81.926123\n [484]  60.268129 109.055402  62.557935  99.902957  92.096688  33.150141 126.938822\n [491]  37.931378 168.068450 129.712586  87.054623  72.867618  55.400361 113.207620\n [498] 128.700848  81.535096  98.265204 154.707523 114.608501 166.312809 121.036173\n [505]  53.421908  26.757131  67.029504 139.829908 126.388719  39.428108 163.867632\n [512]  64.283847 110.679954  81.666662",
        "  22.616823 145.315599  30.491675 130.959348\n [519]  26.663514  45.986901 143.466182 152.860493 150.059805 166.017073  35.882024\n [526]  20.837371  32.597114  97.083951 107.785209  47.674875 100.994026  64.218228\n [533] 141.447136  31.956902  67.884533  94.538128 122.972914 155.305873  76.845735\n [540]  76.267821  80.298917 143.510858 165.060237 103.539041  72.793268  36.862713\n [547]  85.792185  99.032435  77.889075  86.083597  49.486238  73.339924  53.447835\n [554]  79.405509  69.302058  25.567098  73.785545",
        "  81.707338  65.713817  35.017049\n [561]  19.032165  70.442581 117.750479  31.324161 111.155619  65.524466  78.994130\n [568]  77.192641 144.408605 134.546141 115.083921 104.429105  32.669567  81.927200\n [575] 134.042361  84.033360 147.338969 127.789152  98.168325 128.056610 137.502052\n [582] 166.379272 124.238612  68.065857 100.661479 152.853007 123.235201 156.369663\n [589]  91.533558 121.030671 103.916178  32.750278  75.417790  79.595942 118.196754\n [596] 105.940561 123.855924  65.635382 101.868684  48.685714",
        "  63.348048  88.864709\n [603]  20.932208  60.817250 129.074984  86.874912 151.077316 136.275077 115.553691\n [610]  74.412568 157.082157 132.590280  89.214440 109.429328  27.966877  13.622441\n [617] 145.186674 154.608983 148.730858  50.361676 138.850091  54.715143  35.601170\n [624]  91.231925 150.676640  23.420333 129.691339  64.824488  63.556766 137.579971\n [631]  40.815460  68.197382  76.081504 138.084489 153.602186  30.034018  13.819005\n [638] 142.453526  99.710623  98.024303  32.426403  50.519389 153.426441",
        "  59.017949\n [645] 103.569099  99.529849  45.385974 149.472670 147.576807  75.581955  90.476193\n [652] 138.893754 121.709962 112.704129 170.331411  70.972255  71.397038  59.587354\n [659]  48.582235 129.353675  39.038574  80.996490 146.570262  93.801840  82.628383\n [666]  73.751631 113.003153 117.360519 118.301480  39.858446  70.407591 105.196967\n [673] 166.978964 127.570042 111.195849 133.699529 114.600087  86.720746  75.107104\n [680] 134.834981  99.515440 131.094942 107.977435 109.130702 155.094068  60.172108",
        "\n [687]  14.475584  41.762454  91.226000  96.148410  78.814451  99.118522 114.766676\n [694]  54.731461 145.642066 134.259270  64.821190 108.417913  39.194616 116.677937\n [701] 109.388901  50.785015  38.426451  33.580242 146.331501  79.510194  99.606788\n [708]  26.921474 131.466851  64.595571  79.450011  66.418991 103.368476 146.596778\n [715]  38.098402 146.693059  22.049952 106.359063 125.606399  27.333942 100.761641\n [722]  85.575671  50.109029  44.690751  38.099924 170.051503 154.475017  60.177224\n [729]  60.826544",
        " 135.409842 126.002604 128.912621  97.071492  47.100776  31.282249\n [736]  71.010168 107.352527  51.407276  95.400192  40.236949  12.271753 150.965632\n [743] 159.310529 100.347740 107.036336 100.230621 124.198273 127.415512  98.217520\n [750] 108.093662 155.293713  68.273320  73.118216 157.760127 147.064506 124.552198\n [757]  60.297483 142.936705 105.526409  27.766853  57.380708  35.464523 107.630253\n [764]  90.682260  73.314224 128.025776 109.248359  37.835020  97.357419  84.661195\n [771]  56.009703 142.442440",
        " 116.607369 131.676435  53.050982 127.376606  91.064315\n [778] 121.950110  94.149158  33.085799 134.959372 165.438430  12.400640  68.627745\n [785]  37.669813 132.765292  61.169226 100.047010 157.038910  97.834761  93.228123\n [792] 177.334741  97.289481 111.510387   3.637908  41.766120 113.752256  96.784627\n [799]  68.305403  56.661121  48.904080 106.215491  78.040477 103.127739  78.476367\n [806]  67.303365  90.045548  27.621039 144.629118 103.823438  80.483438  86.687449\n [813]  52.037409  41.932079  89.725815",
        " 124.096049 112.671061  36.456321  42.124671\n [820]  95.406546  39.474004  40.842266  61.262644  21.074675 123.048584  57.340226\n [827]  86.766417 128.369734  46.749689 122.412073  78.221056 102.295735 152.579533\n [834] 121.308921  40.778846  83.417258  53.801734 142.083905  87.074834  40.033766\n [841] 120.068045  79.735343 127.686182  35.229938 126.993936  54.358988  62.945096\n [848] 133.313642  98.405966  68.003386 130.802035  55.267077 124.289307 137.471842\n [855]  34.704781 123.981222 146.200658  67.059910",
        "  55.180021  83.059870 139.612692\n [862] 138.002116  46.928382 149.079543 127.378958 105.547716 159.211974 117.220392\n [869] 127.796876  96.694400  68.470699  92.932913  25.445788  32.236659 145.424329\n [876] 111.618803  82.479152 162.618537 117.218987  92.981582 129.023795  48.263537\n [883] 119.178268 125.968266  89.954538 106.208031  99.964357  83.250025  65.819137\n [890] 144.363917 129.284221 101.754568 124.112356  72.687583  61.705594  76.558197\n [897] 152.391556  82.364269 129.419192   6.305656 148.648956",
        "  78.712546  56.792203\n [904]  97.329560  49.320287  16.271405  53.860922  61.458146 113.018400 154.648990\n [911] 104.093884  42.168895  40.387930  38.818383  77.281656  24.861740  27.318619\n [918]  65.882395 138.925778  19.971399  77.254167  45.578019  82.288563  54.765972\n [925]  62.922938  42.595981  94.135290  74.091454 116.736148  70.624953  68.043319\n [932]  51.521189  97.309142 109.867542  50.216150  79.962884 134.732890 126.128788\n [939]  64.533095 102.465822 131.303802  36.947268  50.302235  84.093096",
        "  94.037482\n [946] 151.949076  92.973095  57.395840  73.937829  64.868130  57.942750 108.338444\n [953] 135.710635 131.844160 138.511681 116.198528 133.865673 110.165140 124.287294\n [960]  59.654048 136.439314  42.446051 102.977480 165.564079  72.507148  97.421528\n [967]  34.102617 160.892251 123.913468  86.368209 128.754269  54.623894  80.506995\n [974]  89.815042  65.884768 139.121029 137.250567  80.303362  92.367114 100.025542\n [981] 154.599789 124.553815  84.923038  35.628297  63.891059  55.921563 103.841513",
        "\n [988]  48.870421 123.248366  68.135066 111.373015  51.853629  68.995854  71.582911\n [995]  92.428507 150.406499 149.715148  73.800926  75.229668  80.376548\n [ reached getOption(\"max.print\") -- omitted 50 entries ]\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_parity_turns_example1.R\")",
        "[1] \"finding approximations to turns ...\"\n[1] \"finding turns (for real) ...\"\n[1] \"procedure lasted:  0.34062933921814\"\n",
        "The following objects are masked _by_ .GlobalEnv:\n\n    points, R_fuzzy, u\n\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_parity_sign_example1.R\")",
        "[1] \"solving footpoints ... \"\n[1] \"finding approximations to turns ...\"\n[1] \"finding turns (for real) ...\"\n[1] \"correcting class on projections ...\"\n[1] \"procedure lasted:  1.60296106338501\"\n",
        "The following objects are masked _by_ .GlobalEnv:\n\n    points, R_fuzzy, u\n\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_parity_sign_example1.R\")",
        "[1] \"solving footpoints ... \"\n[1] \"finding approximations to turns ...\"\n[1] \"finding turns (for real) ...\"\n[1] \"procedure lasted:  1.58642935752869\"\n",
        "The following objects are masked _by_ .GlobalEnv:\n\n    points, R_fuzzy, u\n\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_footpoint_example2.R\")",
        "[1] \"No parameter vector found (u = NULL). Prompting points ...\"\n[1] \"prompting mode: distance\"\n[1] \"projecting points onto curve\"\n[1] \"prompt mode: distance\"\n[1] \"algorithm: directional\"\n[1] \"point: <index of the datum>, it.: <number of iterations>\"\n[1] \"point: 1 , it.: 3 ( directional )\"\n[1] \"point: 2 , it.: 3 ( directional )\"\n[1] \"point: 3 , it.: 3 ( directional )\"\n[1] \"point: 4 , it.: 3 ( directional )\"\n[1] \"point: 5 , it.: 4 ( directional )\"\n[1] \"point: 6 , it.: 3 ( directional )\"\n[1] \"point: 7 , it.: 3 ( directional )\"",
        "\n[1] \"point: 8 , it.: 3 ( directional )\"\n[1] \"point: 9 , it.: 3 ( directional )\"\n[1] \"point: 10 , it.: 3 ( directional )\"\n[1] \"point: 11 , it.: 4 ( directional )\"\n[1] \"point: 12 , it.: 3 ( directional )\"\n[1] \"point: 13 , it.: 3 ( directional )\"\n[1] \"point: 14 , it.: 3 ( directional )\"\n[1] \"point: 15 , it.: 3 ( directional )\"\n[1] \"point: 16 , it.: 4 ( directional )\"\n[1] \"point: 17 , it.: 4 ( directional )\"\n[1] \"point: 18 , it.: 4 ( directional )\"\n[1] \"point: 19 , it.: 4 ( directional )\"\n[1] \"point: 20 , it.: 3 ( directional )\"",
        "\n[1] \"point: 21 , it.: 4 ( directional )\"\n[1] \"point: 22 , it.: 3 ( directional )\"\n[1] \"point: 23 , it.: 3 ( directional )\"\n[1] \"point: 24 , it.: 3 ( directional )\"\n[1] \"point: 25 , it.: 4 ( directional )\"\n[1] \"point: 26 , it.: 3 ( directional )\"\n[1] \"point: 27 , it.: 3 ( directional )\"\n[1] \"point: 28 , it.: 3 ( directional )\"\n[1] \"point: 29 , it.: 3 ( directional )\"\n[1] \"point: 30 , it.: 3 ( directional )\"\n[1] \"point: 31 , it.: 4 ( directional )\"\n[1] \"point: 32 , it.: 4 ( directional )\"\n[1] \"point: 33 , it.: 4 ( directional )\"",
        "\n[1] \"point: 34 , it.: 3 ( directional )\"\n[1] \"point: 35 , it.: 3 ( directional )\"\n[1] \"point: 36 , it.: 4 ( directional )\"\n[1] \"point: 37 , it.: 3 ( directional )\"\n[1] \"point: 38 , it.: 3 ( directional )\"\n[1] \"point: 39 , it.: 3 ( directional )\"\n[1] \"point: 40 , it.: 3 ( directional )\"\n[1] \"projection angles ***\"\n [1] 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90\n[27] 90 90 90 90 90 90 90 90 90 90 90 90 90 90\n",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_footpoint_example1.R\")",
        "[1] \"non-native ** native execution times in seconds: 0.132493257522583 ** 0.00110292434692383\"\n[1] \"projection angles ***\"\n [1] 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000\n [9] 90.00000 90.00000 90.93372 90.00000 90.00000 90.00000 90.00000 90.00000\n[17] 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000\n[25] 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000\n[33] 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000\n",
        "Press [enter] to continue",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_fit_example2.R\")",
        "Warning message:\n",
        "In bspline_footpoint(d_point, c_point, initial.scan.points = 100,  :",
        "\n ",
        " [Max] non-orthogonal minimum found. discarding ... \n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_fit_example2.R\")",
        "[1] \"i: 1 mse: 3.2083543500022\"\n[1] \"i: 2 mse: 0.303949009348484\"\n[1] \"i: 3 mse: 0.113157571762362\"\n[1] \"i: 4 mse: 0.0787824311682201\"\n[1] \"i: 5 mse: 0.0730731932643918\"\n[1] \"i: 6 mse: 0.0720837188890973\"\n[1] \"i: 7 mse: 0.0673219271129464\"\n[1] \"i: 8 mse: 0.0542832193024401\"\n[1] \"i: 9 mse: 0.0377059765800254\"\n[1] \"i: 10 mse: 0.0238677009555914\"\n[1] \"i: 11 mse: 0.0143011735246466\"\n[1] \"i: 12 mse: 0.00841091953777768\"\n[1] \"i: 13 mse: 0.00497299422729837\"\n[1] \"i: 14 mse: 0.00307171239214009\"\n[1] \"i: 15 mse: 0.0019527419855575\"",
        "\n[1] \"i: 16 mse: 0.00128193959301713\"\n[1] \"i: 17 mse: 0.000867715230723485\"\n[1] \"i: 18 mse: 0.00062576088299034\"\n[1] \"i: 19 mse: 0.000459625120258519\"\n[1] \"i: 20 mse: 0.00033938482752821\"\n[1] \"i: 21 mse: 0.000258308069453527\"\n[1] \"i: 22 mse: 0.000199859379113242\"\n[1] \"i: 23 mse: 0.000156476490391915\"\n[1] \"i: 24 mse: 0.000122948373897437\"\n[1] \"i: 25 mse: 0.000096638009062114\"\n[1] \"i: 26 mse: 0.0000770430571761916\"\n[1] \"i: 27 mse: 0.0000637718568356412\"\n[1] \"i: 28 mse: 0.0000530851498767592\"\n[1] \"i: 29 mse: 0.0000441669774736097\"",
        "\n[1] \"i: 30 mse: 0.0000367171056136686\"\n[1] \"i: 31 mse: 0.0000305847521004601\"\n[1] \"i: 32 mse: 0.0000256141923704639\"\n[1] \"i: 33 mse: 0.0000213964867166983\"\n[1] \"i: 34 mse: 0.0000183585759833894\"\n[1] \"i: 35 mse: 0.0000163665086929679\"\n[1] \"i: 36 mse: 0.00001448061425658\"\n[1] \"i: 37 mse: 0.0000127959596425338\"\n[1] \"i: 38 mse: 0.0000113203925438465\"\n[1] \"i: 39 mse: 0.0000100294178039265\"\n[1] \"i: 40 mse: 0.00000888356036626308\"\n[1] \"i: 41 mse: 0.00000784269993527049\"\n[1] \"i: 42 mse: 0.00000696818398451288\"\n[1]",
        " \"i: 43 mse: 0.00000624917214575518\"\n[1] \"i: 44 mse: 0.00000574885719289908\"\n[1] \"i: 45 mse: 0.00000525620317229774\"\n[1] \"i: 46 mse: 0.00000480031890966353\"\n[1] \"i: 47 mse: 0.0000043811968410875\"\n[1] \"i: 48 mse: 0.00000400078833197268\"\n[1] \"i: 49 mse: 0.00000364146583981811\"\n[1] \"i: 50 mse: 0.00000333775947158164\"\n[1] \"i: 51 mse: 0.00000305479640131372\"\n[1] \"i: 52 mse: 0.00000278641564166111\"\n[1] \"i: 53 mse: 0.00000255432385470599\"\n[1] \"i: 54 mse: 0.00000233338172540467\"\n[1] \"i: 55 mse: 0.00000213519949395503\"",
        "\n[1] \"i: 56 mse: 0.00000194992403491592\"\n[1] \"i: 57 mse: 0.00000178064474651952\"\n[1] \"i: 58 mse: 0.00000163289286450259\"\n[1] \"i: 59 mse: 0.00000155067255654989\"\n[1] \"i: 60 mse: 0.00000146378673423712\"\n[1] \"i: 61 mse: 0.00000137694538448043\"\n[1] \"i: 62 mse: 0.00000129548160984158\"\n[1] \"i: 63 mse: 0.00000121549959619696\"\n[1] \"i: 64 mse: 0.00000114217983612136\"\n[1] \"i: 65 mse: 0.00000107562368437124\"\n[1] \"i: 66 mse: 0.00000101236618234785\"\n[1] \"i: 67 mse: 0.000000952925416346195\"\n[1] \"i: 68 mse: 0.000000895976027795328\"",
        "\n[1] \"i: 69 mse: 0.000000841801540200756\"\n[1] \"i: 70 mse: 0.000000809871003105385\"\n[1] \"i: 71 mse: 0.000000791962328100268\"\n[1] \"i: 72 mse: 0.000000768831565425509\"\n[1] \"i: 73 mse: 0.000000747013880418975\"\n[1] \"i: 74 mse: 0.000000724959607233106\"\n[1] \"i: 75 mse: 0.00000070341151985704\"\n[1] \"i: 76 mse: 0.000000682541658049816\"\n[1] \"i: 77 mse: 0.000000662388591956859\"\n[1] \"i: 78 mse: 0.000000642876620891602\"\n[1] \"i: 79 mse: 0.0000006242509586175\"\n[1] \"i: 80 mse: 0.000000605656778725187\"\n[1] \"i: 81 mse: 0.000000588255118996392\"",
        "\n[1] \"i: 82 mse: 0.000000572713743971608\"\n[1] \"i: 83 mse: 0.000000555551384180275\"\n[1] \"i: 84 mse: 0.000000539302629115463\"\n[1] \"i: 85 mse: 0.000000524027790196208\"\n[1] \"i: 86 mse: 0.000000507885374726853\"\n[1] \"i: 87 mse: 0.000000492616740175906\"\n[1] \"i: 88 mse: 0.000000477969937908042\"\n[1] \"i: 89 mse: 0.000000462240119287855\"\n[1] \"i: 90 mse: 0.000000449257729937375\"\n[1] \"i: 91 mse: 0.000000437242450361851\"\n[1] \"i: 92 mse: 0.000000422602740633151\"\n[1] \"i: 93 mse: 0.000000409636549138296\"\n[1] \"i: 94 mse: 0.000000397427348273149\"",
        "\n[1] \"i: 95 mse: 0.00000038574333671358\"\n[1] \"i: 96 mse: 0.000000374426647361144\"\n[1] \"i: 97 mse: 0.000000363387547988446\"\n[1] \"i: 98 mse: 0.000000354004763921647\"\n[1] \"i: 99 mse: 0.000000345460353801686\"\n[1] \"i: 100 mse: 0.000000332288459454704\"\n[1] \"i: 101 mse: 0.000000320993057054835\"\n[1] \"i: 102 mse: 0.000000311613191805993\"\n[1] \"i: 103 mse: 0.000000302516490512147\"\n[1] \"i: 104 mse: 0.000000295413365721838\"\n[1] \"i: 105 mse: 0.00000028508189627571\"\n[1] \"i: 106 mse: 0.000000275842544015308\"\n[1] \"i: 107 mse: 0.000000267473773230686\"",
        "\n[1] \"i: 108 mse: 0.000000259457767533564\"\n[1] \"i: 109 mse: 0.00000025169516617476\"\n[1] \"i: 110 mse: 0.000000243531973586465\"\n[1] \"i: 111 mse: 0.000000236426664150173\"\n[1] \"i: 112 mse: 0.000000228985298257539\"\n[1] \"i: 113 mse: 0.000000222376630789926\"\n[1] \"i: 114 mse: 0.000000215712289708223\"\n[1] \"i: 115 mse: 0.000000209006143628329\"\n[1] \"i: 116 mse: 0.00000020282858269238\"\n[1] \"i: 117 mse: 0.000000196921539887884\"\n[1] \"i: 118 mse: 0.000000191041054835766\"\n[1] \"i: 119 mse: 0.000000185245979703107\"\n[1] \"i: 120 mse: 0.000000180330149877864\"",
        "\n[1] \"i: 121 mse: 0.000000174047241186659\"\n[1] \"i: 122 mse: 0.000000168381702933139\"\n[1] \"i: 123 mse: 0.000000163388690678129\"\n[1] \"i: 124 mse: 0.000000158495189258686\"\n[1] \"i: 125 mse: 0.0000001536003196678\"\n[1] \"i: 126 mse: 0.00000014884847247654\"\n[1] \"i: 127 mse: 0.000000144374032615787\"\n[1] \"i: 128 mse: 0.00000014002317462476\"\n[1] \"i: 129 mse: 0.000000134788927480485\"\n[1] \"i: 130 mse: 0.000000131580140310323\"\n[1] \"i: 131 mse: 0.000000127945857900982\"\n[1] \"i: 132 mse: 0.000000124188614587767\"\n[1] \"i: 133 mse: 0.000000120592010038938\"",
        "\n[1] \"i: 134 mse: 0.000000116954740260926\"\n[1] \"i: 135 mse: 0.000000113420528396968\"\n[1] \"i: 136 mse: 0.000000109971422213757\"\n[1] \"i: 137 mse: 0.000000106651033316975\"\n[1] \"i: 138 mse: 0.000000103415684432395\"\n[1] \"i: 139 mse: 0.000000100270592192704\"\n[1] \"i: 140 mse: 0.0000000972156762726325\"\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_fit_example1.R\")",
        "Press [enter] to continue",
        "",
        "Press [enter] to continue",
        "",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_eval_example2.R\")",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_eval_example1.R\")",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/interpolate_bspline_example3.R\")",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/interpolate_bspline_example2.R\")",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/interpolate_bspline_example1.R\")",
        "> ",
        "example(\"bspline_uz_sign\")",
        "\nbspl__> # USER PARAMETERS -------------------------\nbspl__> require(modgeom)\n\nbspl__> load(\"data/bspline_uz_turns_data\") # comes from the processing in bspline2_test8 example.\n\nbspl__> deg <- 3\n\nbspl__> #c_points <- rbind(c_points,c(2.5,-1,2))\nbspl__> vec_shift_value=2\n\nbspl__> c_points <- rbind( c(0,0,-.5),c(-1,0,-.5),c(-1,1,0), c(2,1,1) ,c(4,1,0),c(4,0,-.5),c(3,0,-.5) )\n\nbspl__> for(j in 1:nrow(c_points))\nbspl__+   c_points[j,3] <- c_points[j,3] + vec_shift_value\n\nbspl__> u <- seq(from = 0, to = 1, length.out=100)",
        "\n\nbspl__> points <- interpolate_bspline(u, c_points, degree = deg)\n\nbspl__> ref_point <- c(4,1,1)    # the reference observation point\n\nbspl__> ref_point_alt <- ref_point[length(ref_point):1]\n\nbspl__> # we need to define also the points that will be projected\nbspl__> n <- 80 # the number of points that will be projected\n\nbspl__> dev <- 1  # the deviation in the test points\n\nbspl__> cell.points <- cbind( runif(2*n, min=-dev, max=dev), \nbspl__+                  runif(2*n, min=-dev, max=dev), \nbspl__+                  runif(2*n, min=-dev, max=dev) )",
        "\n\nbspl__> #rm(n)\nbspl__> rM <- c()\n\nbspl__> for(i in 1:n)\nbspl__+   rM <- rbind(rM, ref_point)\n\nbspl__> for(i in (n+1):(2*n))\nbspl__+   rM <- rbind(rM, ref_point_alt)\n\nbspl__> #cell.points <- rbind(cell.points, cell.points)\nbspl__> cell.points <- cell.points + rM\n\nbspl__> rm(rM,i)\n\nbspl__> rm(n)\n\nbspl__> # checks the turns function detection ----------------\nbspl__> ftpt_u <- bspline_footpoint(cell.points, c_points, degree = deg, algorithm=\"directional\",\nbspl__+                             tolerance=1e-12, max.iterations = 800, initial.scan.points=nrow(c_points)*100)",
        "\n\nbspl__> ftpoints <- interpolate_bspline(ftpt_u, c_points, degree = deg)\n\nbspl__> multiplier <- 2000\n\nbspl__> start.time1 <- Sys.time()\n\nbspl__> signv <- bspline_uz_sign (\nbspl__+           c_points,\nbspl__+           cell.points,\nbspl__+           fp.u = NULL,\nbspl__+           degree = deg,\nbspl__+           tolerance=1e-15,\nbspl__+           fp.tolerance=1e-12,\nbspl__+           max.iterations = 1500,\nbspl__+           initial.scan.points=nrow(c_points)*multiplier,\nbspl__+           uz = c(0,1,0),\nbspl__+           fp.verbose=TRUE\nbspl__+ )",
        "\n[1] \"solving footpoints ... \"\n[1] \"finding approximations to turns ...\"\n[1] \"finding turns (for real) ...\"\n\nbspl__> signv_xor <- signv[[2]]\n\nbspl__> u_turn2_data <- signv[[1]]\n\nbspl__> end.time1 <- Sys.time()\n\nbspl__> end.time1 <- start.time1 - end.time1\n\nbspl__> print(paste(\"procedure lasted: \",-end.time1))\n[1] \"procedure lasted:  2.72567844390869\"\n\nbspl__> # GRAPHICS --------------------------------------\nbspl__> d3graphics <- function (signv, tag, vpar = c(0,0)){\nbspl__+   attach(loaded.data)\nbspl__+   require(rgl)\nbspl__+   \nbspl__+   cls <- rep(\"red\", times=nrow(cell.points))\nbspl__+   cls[signv] <- \"blue\"\nbspl__+   \nbspl__+ \nbspl__+   \nbspl__+   plot3d(R_fuzzy, type=\"n\", xlab=\"x\", ylab=\"y\", zlab=\"z\")\nbspl__+   #points3d(R_fuzzy, col=\"yellowgreen\", size=3, pch=21, bg=\"red\" )\nbspl__+   par3d(windowRect=c(150, 150, 700, 700))\nbspl__+   rgl.viewpoint(vpar[1], vpar[2])\nbspl__+   #par3d(zoom = 1)\nbspl__+   \nbspl__+   \nbspl__+   #points3d(t(as.matrix(ref_point)), col=\"red\", size=8)\nbspl__+   points3d(c_points, col=\"lightblue4\", size=4)\nbspl__+   lines3d(c_points, col=\"lightblue4\", lty=\"dotted\", lwd=.5)\nbspl__+   lines3d(points, col=\"lightblue4\", lwd=2) # points of the spline curve\nbspl__+   sgs <- c();\nbspl__+ \nbspl__+   for(j in 1:length(u_turn2_data)){\nbspl__+     if(nrow(u_turn2_data[[j]]) > 0){\nbspl__+       \nbspl__+       tp <- interpolate_bspline (u_turn2_data[[j]]$u.found, c_points, degree=deg)\nbspl__+       \nbspl__+       clst <- cls[j]\nbspl__+       \nbspl__+       lines3d( rbind(cell.points[j,],ftpoints[j,]), col=clst, lwd=.01)\nbspl__+       \nbspl__+       points3d( tp,  col=\"green\", size = 6  )\nbspl__+     }\nbspl__+   }\nbspl__+   \nbspl__+   points3d( cell.points, col=cls , size = 6 )\nbspl__+   v0 <- interpolate_bspline (0, c_points, degree=deg, derivate=0)\nbspl__+   v1 <- interpolate_bspline (0, c_points, degree=deg, derivate=1)\nbspl__+   v1 <- v1 / (2*sqrt(sum(v1^2)) )\nbspl__+   v1 <- v0 + v1\nbspl__+   arrow3d(v0, v1, 1/20, width=1/4, thickness=1/10)\nbspl__+   rm(tp)\nbspl__+   detach(loaded.data)\nbspl__+ }",
        "\n\nbspl__> cc <- 0\n\nbspl__> sq <- c(0:90,89:1)\n\nbspl__> i = sq[sq %% 10 == 0][1]\n\nbspl__> cc <- cc+1\n\nbspl__> vpar1 <- c(i,i)\n\nbspl__> cst <- as.character(cc)\n\nbspl__> if(nchar(cst) == 1) cst <- paste(\"00\",cst, sep=\"\")\n\nbspl__> if(nchar(cst) == 2) cst <- paste(\"0\",cst, sep=\"\")\n\nbspl__> d3graphics(signv_xor, paste(\"xor_scalar_parity_\",cst,sep=\"\"),vpar=vpar1)\n",
        "The following objects are masked _by_ .GlobalEnv:\n\n    points, R_fuzzy, u\n\n",
        "\nbspl__> rm(i,cc)\n",
        "> ",
        "getwd()",
        "[1] \"/home/maxkavian/MAX_DOCUMENTS_debian/R_packages/modgeom\"\n\nRestarting R session...\n\n",
        "> ",
        "library(modgeom)",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_parity_sign_example1.R\")",
        "[1] \"solving footpoints ... \"\n[1] \"finding approximations to turns ...\"\n[1] \"finding turns (for real) ...\"\n[1] \"procedure lasted:  1.53375554084778\"\n",
        "The following objects are masked _by_ .GlobalEnv:\n\n    points, R_fuzzy, u\n\n",
        "> ",
        "source(\"~/MAX_DOCUMENTS_debian/R_packages/modgeom/examples/bspline_parity_turns_example1.R\")",
        "[1] \"finding approximations to turns ...\"\n[1] \"finding turns (for real) ...\"\n[1] \"procedure lasted:  0.320943355560303\"\n",
        "The following objects are masked _by_ .GlobalEnv:\n\n    points, R_fuzzy, u\n\n",
        "> ",
        "version",
        "               _                           \nplatform       x86_64-pc-linux-gnu         \narch           x86_64                      \nos             linux-gnu                   \nsystem         x86_64, linux-gnu           \nstatus                                     \nmajor          4                           \nminor          1.1                         \nyear           2021                        \nmonth          08                          \nday            10                          \nsvn rev        80725                       ",
        "\nlanguage       R                           \nversion.string R version 4.1.1 (2021-08-10)\nnickname       Kick Things                 \n",
        "> ",
        "version(\"rgl\")",
        "Error in version(\"rgl\") : no se pudo encontrar la función \"version\"\n",
        "> ",
        "example(\"bspline_fit\")",
        "\nbspln_> #\nbspln_> # Example of sequential spline fitting.\nbspln_> #\nbspln_> # This example does not show the performance of the function bspline_fit. Instead\nbspln_> # it is intended to graphically depict the sequential performance of the\nbspln_> # fitting algorithm. Check bspline_fit_example2.R in order to test a real \nbspln_> # bspline_fit execution\nbspln_> #\nbspln_> \nbspln_> # USER PARAMETERS -------------------------\nbspln_> require(modgeom)\n\nbspln_> # the normal curve positions for drawing\nbspln_> position <- seq(from = 0, to = 1, length.out = 800)",
        "\n\nbspln_> # the control points\nbspln_> c_point <- t( rbind(c(0,1,2,3,3), c(0,3,3,3,3), c(2,-1,7,3,4)) )\n\nbspln_> # the degree\nbspln_> deg <- 3\n\nbspln_> # the number of initial control points of the first guess\nbspln_> # this makes the result more complex\nbspln_> initial.control.points<- deg\n\nbspln_> # the standard deviation of the randomization\nbspln_> normal.dev <- .1\n\nbspln_> # number of points of the dataset\nbspln_> rand_position <- runif(300)\n\nbspln_> angle <- -20\n\nbspln_> zom <- 0.5\n\nbspln_> # COMPUTATION ----------------------------\nbspln_> \nbspln_> # the correct model\nbspln_> R <- interpolate_bspline(position, c_point, degree=deg)",
        "\n\nbspln_> # the B-spline interpolation for the random\nbspln_> R_fuzzy <- interpolate_bspline(rand_position, c_point, degree=deg)\n\nbspln_> # randomization in the 3 coordinates\nbspln_> R_fuzzy <- rnorm(length(R_fuzzy), mean = 0, sd = normal.dev) + R_fuzzy\n\nbspln_> # TEST FITTING solution ---------------------\nbspln_> # finds the diagonal of the bounding box according to the current degree\nbspln_> nc_point <- bounding_diagonal_spline(R_fuzzy, initial.control.points, f=1.4)\n\nbspln_> RN <- interpolate_bspline(position, nc_point, degree=deg)",
        "\n\nbspln_> RN0 <- RN\n\nbspln_> ft_points <- bspline_footpoint(R_fuzzy, nc_point, degree = deg, \nbspln_+                                tolerance=1e-1, verbose=F)\n\nbspln_> RN_ft <- interpolate_bspline(ft_points, nc_point, degree = deg)\n\nbspln_> #DRAWING ----------------\nbspln_> require(rgl)\n\nbspln_> #draws the data points\nbspln_> plot3d(R_fuzzy, size=3,\nbspln_+        aspect=FALSE, xlab =\"\", ylab=\"\", zlab =\"\", \nbspln_+        col=\"gray50\", lwd=2, main = \"\",\nbspln_+        xlim=c(-1,5),ylim=c(-1,5),zlim=c(-1,5), box=FALSE, axes=FALSE)",
        "\n\nbspln_> rgl.viewpoint(25,angle, zoom =zom)\n\nbspln_> par3d(windowRect=c(184, 130, 813, 666))\n\nbspln_> #par3d(zoom = 1)\nbspln_> \nbspln_> # draws stage 0 ab initio\nbspln_> points3d(nc_point, pch=2, col=rgb(0.7,0.7,0.7), size = 3)\n\nbspln_> lines3d(nc_point, col=rgb(0.5,0.5,1), lty=2, lwd=.5)\n\nbspln_> # solves several times the problem\nbspln_> lim<-50 # number of fixed iterations provided\n\nbspln_> RNg <- c()\n\nbspln_> for(j in 1:lim){\nbspln_+   #j<-1\nbspln_+   nc_point <- bspline_solve(R_fuzzy, ft_points, nc_point, \nbspln_+                             degree=deg, reg.factor=1)\nbspln_+   # the interpolation of the new control points\nbspln_+   RN <- interpolate_bspline(position, nc_point, degree=deg, native=TRUE)\nbspln_+   ft_points <- bspline_footpoint(R_fuzzy, nc_point, u=ft_points,degree = deg, \nbspln_+                                  tolerance=1e-6,verbose =F, step=1,native=TRUE)\nbspln_+   \nbspln_+   w<-1\nbspln_+   clr1 <- rgb(0.5,0.5,1);\nbspln_+   clr2 <- rgb(0.7,0.7, 0.7);\nbspln_+   if(j==lim){\nbspln_+     clr1 <- rgb(0,0,1);  \nbspln_+     clr2 <- rgb(0.7,0.7,0.7);\nbspln_+     w=3\nbspln_+   }\nbspln_+   \nbspln_+   # draws the diagonal spline (ab initio)\nbspln_+   points3d(nc_point, pch=2, col=clr2, size = 3)\nbspln_+   lines3d(nc_point, col=clr2, lty=2, lwd=w)\nbspln_+   # draws the current curve\nbspln_+   lines3d(RN, col=clr1, lwd=w)\nbspln_+   \nbspln_+   Sys.sleep(1)\nbspln_+   \nbspln_+   if(j== 1)\nbspln_+     RNg <- RN\nbspln_+ }",
        "\n\nbspln_> # DISPLAYS the final results, i.e. original curve and final curve.\nbspln_> readline(prompt=\"Press [enter] to continue\")\n",
        "Press [enter] to continue",
        "",
        "[1] \"\"\n\nbspln_> #draws the data points\nbspln_> plot3d(R_fuzzy, size=3,\nbspln_+        aspect=FALSE, xlab =\"\", ylab=\"\", zlab =\"\", \nbspln_+        col=\"gray50\", lwd=2, main = \"\",\nbspln_+        xlim=c(-1,5),ylim=c(-1,5),zlim=c(-1,5), box=FALSE, axes=FALSE)\n\nbspln_> rgl.viewpoint(25,angle, zoom =zom)\n\nbspln_> lines3d(RN, col=rgb(0,0,1), lwd=w)\n\nbspln_> #lines3d(RNg, col=rgb(0,0,1), lwd=2)\nbspln_> lines3d(RN0, col=rgb(0,0,1), lwd=1)\n\nbspln_> # draws stage 0 ab initio\nbspln_> points3d(nc_point, pch=2, col=rgb(0.7,0.7,0.7), size = 3)",
        "\n\nbspln_> lines3d(nc_point, col=rgb(0.5,0.5,1), lty=2, lwd=.5)\n\nbspln_> adjs <- c(1,1)\n\nbspln_> text3d(x=RN[nrow(RN) %/% 2,][1],\nbspln_+        y=RN[nrow(RN) %/% 2,][2],\nbspln_+        z=RN[nrow(RN) %/% 2,][3]\nbspln_+        , expression(infinity), \nbspln_+        adj = adjs, cex=2.5, \nbspln_+        col=\"blue\") \n\nbspln_> #text3d(x=RNg[nrow(RN) %/% 2,][1],\nbspln_> #       y=RNg[nrow(RN) %/% 2,][2],\nbspln_> #       z=RNg[nrow(RN) %/% 2,][3]\nbspln_> #       , \"1\", adj = adjs, cex=2, \nbspln_> #       col=\"blue\") \nbspln_> \nbspln_> text3d(x=RN0[nrow(RN) %/% 2,][1],\nbspln_+        y=RN0[nrow(RN) %/% 2,][2],\nbspln_+        z=RN0[nrow(RN) %/% 2,][3]\nbspln_+        , \"0\", adj = adjs, cex=2, \nbspln_+        col=\"blue\") ",
        "\n\nbspln_> readline(prompt=\"Press [enter] to continue\")\n",
        "Press [enter] to continue",
        "",
        "[1] \"\"\n\nbspln_> # it continue with the second example\nbspln_> \nbspln_> #ANIMATES --------------------\nbspln_> \nbspln_> #M <- par3d(\"userMatrix\")\nbspln_> #if (!rgl.useNULL())\nbspln_> #  movie3d(  movie=\"/home/maxkavian/MAX_DOCUMENTS_debian/R_scripts/geometrical_modelling/PD_animate\",\nbspln_> #            par3dinterp(time=(0:2)*0.75,userMatrix=list(M,\nbspln_> #                                                      rotate3d(M, pi/2, 1, 0, 0),\nbspln_> #                                                      rotate3d(M, pi/2, 0, 1, 0) ) ), \nbspln_> #          duration=1.5,fps=24)\nbspln_> \nbspln_> \nbspln_> \nbspln_> \nbspln_> #\nbspln_> # sequential spline fitting using\nbspln_> # bspline_fit\nbspln_> #\nbspln_> \nbspln_> # USER PARAMETERS -------------------------\nbspln_> require(modgeom)",
        "\n\nbspln_> # the normal curve positions for drawing\nbspln_> position <- seq(from = 0, to = 1, length.out = 800)\n\nbspln_> # the control points\nbspln_> c_point <- t( rbind(c(0,1,2,3,3), c(0,3,3,3,3), c(2,-1,7,3,4)) )\n\nbspln_> # the degree\nbspln_> deg <- 3\n\nbspln_> # the number of initial control points of the first guess\nbspln_> # this makes the result more complex\nbspln_> initial.control.points<- deg\n\nbspln_> # the standard deviation of the randomization\nbspln_> normal.dev <- .1\n\nbspln_> # number of points of the dataset\nbspln_> rand_position <- runif(300)",
        "\n\nbspln_> angle <- -20\n\nbspln_> zom <- 0.5\n\nbspln_> # COMPUTATION ----------------------------\nbspln_> \nbspln_> # the correct model\nbspln_> R <- interpolate_bspline(position, c_point, degree=deg)\n\nbspln_> # the B-spline interpolation for the random\nbspln_> R_fuzzy <- interpolate_bspline(rand_position, c_point, degree=deg)\n\nbspln_> # randomization in the 3 coordinates\nbspln_> R_fuzzy <- rnorm(length(R_fuzzy), mean = 0, sd = normal.dev) + R_fuzzy\n\nbspln_> # TEST FITTING solution ---------------------\nbspln_> # finds the diagonal of the bounding box according to the current degree\nbspln_> nc_point <- bounding_diagonal_spline(R_fuzzy, initial.control.points, f=1.4)",
        "\n\nbspln_> w <- 3\n\nbspln_> nc_point <- bspline_fit(R_fuzzy, degree=deg, v=nc_point, \nbspln_+                         tolerance=1e-7,\nbspln_+                         fp.tolerance=1e-3, step=1, #verbose=FALSE, \nbspln_+                         algorithm=\"directional\",\nbspln_+                         verb.progress=TRUE,\nbspln_+                         reg.factor=1, native=TRUE)\n[1] \"i: 1 mse: 3.30081125600776\"\n[1] \"i: 2 mse: 0.21404465297167\"\n[1] \"i: 3 mse: 0.0912630751561729\"\n[1] \"i: 4 mse: 0.0924851268959861\"\n",
        "[1] \"i: 5 mse: 0.0993465221311159\"\n[1] \"i: 6 mse: 0.101272413650269\"\n[1] \"i: 7 mse: 0.0944805846843233\"\n[1] \"i: 8 mse: 0.0783960547965608\"\n[1] \"i: 9 mse: 0.0566533840629959\"\n[1] \"i: 10 mse: 0.037057062360379\"\n[1] \"i: 11 mse: 0.0230663698289018\"\n[1] \"i: 12 mse: 0.0139524960292611\"\n[1] \"i: 13 mse: 0.0085802653447876\"\n[1] \"i: 14 mse: 0.00547772046713993\"\n[1] \"i: 15 mse: 0.00362755116798565\"\n[1] \"i: 16 mse: 0.00253465536065792\"\n[1] \"i: 17 mse: 0.00188031363507849\"\n[1] \"i: 18 mse: 0.00146626924958714\"\n[1] \"i: 19 mse: 0.00119087076376381\"",
        "\n[1] \"i: 20 mse: 0.000991221198595969\"\n[1] \"i: 21 mse: 0.000832506323125356\"\n[1] \"i: 22 mse: 0.000706187904508783\"\n[1] \"i: 23 mse: 0.000598317570137622\"\n[1] \"i: 24 mse: 0.000507363919261072\"\n[1] \"i: 25 mse: 0.000431190114378407\"\n[1] \"i: 26 mse: 0.000366553197822074\"\n[1] \"i: 27 mse: 0.000309974761543026\"\n[1] \"i: 28 mse: 0.000261818031352284\"\n[1] \"i: 29 mse: 0.000221993605953498\"\n[1] \"i: 30 mse: 0.000187088275051149\"\n[1] \"i: 31 mse: 0.000158313449306227\"\n[1] \"i: 32 mse: 0.000135869269755545\"\n[1] \"i: 33 mse: 0.00011668022743518\"",
        "\n[1] \"i: 34 mse: 0.000100016430866682\"\n[1] \"i: 35 mse: 0.0000855818494340612\"\n[1] \"i: 36 mse: 0.0000731100548770277\"\n[1] \"i: 37 mse: 0.0000624278266347585\"\n[1] \"i: 38 mse: 0.0000533633793071039\"\n[1] \"i: 39 mse: 0.0000462960656572578\"\n[1] \"i: 40 mse: 0.0000398206492290621\"\n[1] \"i: 41 mse: 0.0000342143044219537\"\n[1] \"i: 42 mse: 0.0000299145670975167\"\n[1] \"i: 43 mse: 0.0000263492534882733\"\n[1] \"i: 44 mse: 0.0000231584802593401\"\n[1] \"i: 45 mse: 0.000020561663458487\"\n[1] \"i: 46 mse: 0.000018455810741277\"\n[1] \"i: 47 mse: 0.000016505748529526\"",
        "\n[1] \"i: 48 mse: 0.0000147639654764903\"\n[1] \"i: 49 mse: 0.000013205951811354\"\n[1] \"i: 50 mse: 0.0000118023248523847\"\n[1] \"i: 51 mse: 0.0000107157456271923\"\n[1] \"i: 52 mse: 0.00000978454957256007\"\n[1] \"i: 53 mse: 0.00000889549701820227\"\n[1] \"i: 54 mse: 0.0000079178925385208\"\n[1] \"i: 55 mse: 0.00000736761047016316\"\n[1] \"i: 56 mse: 0.00000685707535081976\"\n[1] \"i: 57 mse: 0.00000650423486073053\"\n[1] \"i: 58 mse: 0.00000617971888355022\"\n[1] \"i: 59 mse: 0.00000586398387781092\"\n[1] \"i: 60 mse: 0.00000556768294110768\"",
        "\n[1] \"i: 61 mse: 0.00000530380837409218\"\n[1] \"i: 62 mse: 0.00000504197758449335\"\n[1] \"i: 63 mse: 0.00000479835367068835\"\n[1] \"i: 64 mse: 0.0000045626320683481\"\n[1] \"i: 65 mse: 0.00000443008683741382\"\n[1] \"i: 66 mse: 0.00000431879367885677\"\n[1] \"i: 67 mse: 0.0000042205031475604\"\n[1] \"i: 68 mse: 0.00000412367395003057\"\n[1] \"i: 69 mse: 0.000004016421671335\"\n[1] \"i: 70 mse: 0.00000391719911492635\"\n[1] \"i: 71 mse: 0.00000382070274221626\"\n[1] \"i: 72 mse: 0.00000373852676491676\"\n[1] \"i: 73 mse: 0.00000365409820877233\"",
        "\n[1] \"i: 74 mse: 0.00000357576659974491\"\n[1] \"i: 75 mse: 0.00000349100778188608\"\n[1] \"i: 76 mse: 0.00000341537506691334\"\n[1] \"i: 77 mse: 0.00000334459150888869\"\n[1] \"i: 78 mse: 0.00000327148535747695\"\n[1] \"i: 79 mse: 0.00000319334538801468\"\n[1] \"i: 80 mse: 0.00000312230872157398\"\n[1] \"i: 81 mse: 0.00000308270050078599\"\n[1] \"i: 82 mse: 0.00000296449323133223\"\n[1] \"i: 83 mse: 0.000002905458067379\"\n[1] \"i: 84 mse: 0.00000283982080620854\"\n[1] \"i: 85 mse: 0.00000276531611461657\"\n[1] \"i: 86 mse: 0.00000271196983284174\"",
        "\n[1] \"i: 87 mse: 0.00000260452593364429\"\n[1] \"i: 88 mse: 0.00000255194091997663\"\n[1] \"i: 89 mse: 0.00000250695053895535\"\n[1] \"i: 90 mse: 0.00000243518918344295\"\n[1] \"i: 91 mse: 0.00000239003665988979\"\n[1] \"i: 92 mse: 0.00000233879961512062\"\n[1] \"i: 93 mse: 0.00000228739679054367\"\n[1] \"i: 94 mse: 0.00000223620878699711\"\n[1] \"i: 95 mse: 0.00000218633107222267\"\n[1] \"i: 96 mse: 0.00000213584384743871\"\n[1] \"i: 97 mse: 0.0000020915748443256\"\n[1] \"i: 98 mse: 0.00000204088633432865\"\n[1] \"i: 99 mse: 0.00000199242605236806\"",
        "\n[1] \"i: 100 mse: 0.00000194626120764477\"\n[1] \"i: 101 mse: 0.00000190354235395029\"\n[1] \"i: 102 mse: 0.00000185921844176545\"\n[1] \"i: 103 mse: 0.00000182000622023159\"\n[1] \"i: 104 mse: 0.00000177131505474982\"\n[1] \"i: 105 mse: 0.00000172879523094219\"\n[1] \"i: 106 mse: 0.0000016858199061369\"\n[1] \"i: 107 mse: 0.00000163982090632056\"\n[1] \"i: 108 mse: 0.0000016073647902058\"\n[1] \"i: 109 mse: 0.00000157068968769575\"\n[1] \"i: 110 mse: 0.00000153415923788787\"\n[1] \"i: 111 mse: 0.00000149813171042784\"\n[1] \"i: 112 mse: 0.00000146118167364327\"",
        "\n[1] \"i: 113 mse: 0.0000014240181115868\"\n[1] \"i: 114 mse: 0.0000013901861394378\"\n[1] \"i: 115 mse: 0.00000135623495310743\"\n[1] \"i: 116 mse: 0.00000132445816548955\"\n[1] \"i: 117 mse: 0.00000129076031716231\"\n[1] \"i: 118 mse: 0.00000125895465117296\"\n[1] \"i: 119 mse: 0.00000122797591159082\"\n[1] \"i: 120 mse: 0.00000119915193040364\"\n[1] \"i: 121 mse: 0.00000116685753026058\"\n[1] \"i: 122 mse: 0.00000113789963679874\"\n[1] \"i: 123 mse: 0.00000111364900905916\"\n[1] \"i: 124 mse: 0.000001081466298905\"\n[1] \"i: 125 mse: 0.00000104159032074191\"",
        "\n[1] \"i: 126 mse: 0.00000101682001668065\"\n[1] \"i: 127 mse: 0.000000988634747067282\"\n[1] \"i: 128 mse: 0.000000964522465733386\"\n[1] \"i: 129 mse: 0.000000936999223607101\"\n[1] \"i: 130 mse: 0.00000091800163609851\"\n[1] \"i: 131 mse: 0.000000896680956382696\"\n[1] \"i: 132 mse: 0.000000877822758066495\"\n[1] \"i: 133 mse: 0.000000855407439615408\"\n[1] \"i: 134 mse: 0.000000833293458126396\"\n[1] \"i: 135 mse: 0.000000812227509986399\"\n[1] \"i: 136 mse: 0.000000791582598342166\"\n[1] \"i: 137 mse: 0.000000772012005164941\"\n[1] \"i: 138 mse: 0.000000750618074916975\"",
        "\n[1] \"i: 139 mse: 0.000000731241677105345\"\n[1] \"i: 140 mse: 0.000000712714788618966\"\n[1] \"i: 141 mse: 0.000000693817770294084\"\n[1] \"i: 142 mse: 0.000000675663020939\"\n[1] \"i: 143 mse: 0.000000657737842931013\"\n[1] \"i: 144 mse: 0.000000640830097860856\"\n[1] \"i: 145 mse: 0.000000624238418024711\"\n[1] \"i: 146 mse: 0.000000608274032844523\"\n[1] \"i: 147 mse: 0.000000596361403701842\"\n[1] \"i: 148 mse: 0.000000582911847383105\"\n[1] \"i: 149 mse: 0.000000567133399403233\"\n[1] \"i: 150 mse: 0.000000551408315568228\"\n[1] \"i: 151 mse: 0.00000053520849659912\"",
        "\n[1] \"i: 152 mse: 0.000000520841859379574\"\n[1] \"i: 153 mse: 0.000000507809786366008\"\n[1] \"i: 154 mse: 0.00000049056558881122\"\n[1] \"i: 155 mse: 0.000000477566401213419\"\n[1] \"i: 156 mse: 0.000000464715422143379\"\n[1] \"i: 157 mse: 0.000000452433516569779\"\n[1] \"i: 158 mse: 0.000000440603798496625\"\n[1] \"i: 159 mse: 0.0000004297593908008\"\n[1] \"i: 160 mse: 0.000000413822061223013\"\n[1] \"i: 161 mse: 0.000000403154789536239\"\n[1] \"i: 162 mse: 0.000000395314402544632\"\n[1] \"i: 163 mse: 0.000000382630366829138\"\n[1] \"i: 164 mse: 0.000000371889484892397\"",
        "\n[1] \"i: 165 mse: 0.000000362140165099113\"\n[1] \"i: 166 mse: 0.00000035299532897857\"\n[1] \"i: 167 mse: 0.00000034507020882445\"\n[1] \"i: 168 mse: 0.000000334683017366711\"\n[1] \"i: 169 mse: 0.000000325338575979429\"\n[1] \"i: 170 mse: 0.000000316408051767812\"\n[1] \"i: 171 mse: 0.000000307785016518614\"\n[1] \"i: 172 mse: 0.000000299417271685578\"\n[1] \"i: 173 mse: 0.000000291972990513614\"\n[1] \"i: 174 mse: 0.000000284161774105029\"\n[1] \"i: 175 mse: 0.000000276329308337982\"\n[1] \"i: 176 mse: 0.000000268600868417487\"\n[1] \"i: 177 mse: 0.000000261329571814376\"",
        "\n[1] \"i: 178 mse: 0.000000254144031859757\"\n[1] \"i: 179 mse: 0.000000247186796221297\"\n[1] \"i: 180 mse: 0.000000240629408491638\"\n[1] \"i: 181 mse: 0.00000023407596625542\"\n[1] \"i: 182 mse: 0.000000227696647134014\"\n[1] \"i: 183 mse: 0.000000221300039960024\"\n[1] \"i: 184 mse: 0.000000215513852994527\"\n[1] \"i: 185 mse: 0.000000209531915079397\"\n[1] \"i: 186 mse: 0.000000203637105999647\"\n[1] \"i: 187 mse: 0.000000198115544748202\"\n[1] \"i: 188 mse: 0.000000192695157775062\"\n[1] \"i: 189 mse: 0.000000187405607529349\"\n[1] \"i: 190 mse: 0.000000182253649477958\"",
        "\n[1] \"i: 191 mse: 0.000000177238360885753\"\n[1] \"i: 192 mse: 0.000000171961028184973\"\n[1] \"i: 193 mse: 0.0000001676251066396\"\n[1] \"i: 194 mse: 0.000000163088068078758\"\n[1] \"i: 195 mse: 0.000000158664895191879\"\n[1] \"i: 196 mse: 0.000000154324805814554\"\n[1] \"i: 197 mse: 0.000000150086542683443\"\n[1] \"i: 198 mse: 0.000000145953085916938\"\n[1] \"i: 199 mse: 0.000000141922833900323\"\n[1] \"i: 200 mse: 0.000000137995101366896\"\n[1] \"i: 201 mse: 0.000000134168732245629\"\n[1] \"i: 202 mse: 0.000000130564074087284\"\n[1] \"i: 203 mse: 0.000000126949825265005\"",
        "\n[1] \"i: 204 mse: 0.000000122321153884355\"\n[1] \"i: 205 mse: 0.000000120255992581752\"\n[1] \"i: 206 mse: 0.000000117496155296646\"\n[1] \"i: 207 mse: 0.000000114996941811454\"\n[1] \"i: 208 mse: 0.000000111388787813474\"\n[1] \"i: 209 mse: 0.00000010809934506183\"\n[1] \"i: 210 mse: 0.000000104976846264723\"\n[1] \"i: 211 mse: 0.000000101975889738721\"\n[1] \"i: 212 mse: 0.000000101523261576774\"\n[1] \"i: 213 mse: 0.000000098705129949924\"\n\nbspln_> RN <- interpolate_bspline(position, nc_point, degree=deg,native=TRUE)\n\nbspln_> # DISPLAYS the final results, i.e. original curve and final curve.\nbspln_> require(rgl)",
        "\n\nbspln_> #draws the data points\nbspln_> plot3d(R_fuzzy, size=3,\nbspln_+        aspect=FALSE, xlab =\"\", ylab=\"\", zlab =\"\", \nbspln_+        col=\"gray50\", lwd=2, main = \"\",\nbspln_+        xlim=c(-1,5),ylim=c(-1,5),zlim=c(-1,5), box=FALSE, axes=FALSE)\n\nbspln_> par3d(windowRect=c(184, 130, 813, 666))\n\nbspln_> #par3d(zoom = 1)\nbspln_> rgl.viewpoint(25,angle, zoom =zom)\n\nbspln_> lines3d(RN, col=rgb(0,0,1), lwd=w)\n\nbspln_> #lines3d(RNg, col=rgb(0,0,1), lwd=2)\nbspln_> #lines3d(RN0, col=rgb(0,0,1), lwd=1)\nbspln_> \nbspln_> \nbspln_> \nbspln_> \nbspln_> \nbspln_> ",
        "\n",
        "> ",
        "packageVersion(\"rgl\")",
        "[1] ‘0.107.14’\n",
        "> ",
        "packageVersion(\"tiff\")",
        "[1] ‘0.1.8’\n",
        "> ",
        "packageVersion(\"tensorA\")",
        "[1] ‘0.36.2’\n",
        "> ",
        "version()",
        "Error in version() : no se pudo encontrar la función \"version\"\n",
        "> ",
        "version",
        "               _                           \nplatform       x86_64-pc-linux-gnu         \narch           x86_64                      \nos             linux-gnu                   \nsystem         x86_64, linux-gnu           \nstatus                                     \nmajor          4                           \nminor          1.1                         \nyear           2021                        \nmonth          08                          \nday            10                          \nsvn rev        80725                       ",
        "\nlanguage       R                           \nversion.string R version 4.1.1 (2021-08-10)\nnickname       Kick Things                 \n",
        "> ",
        "packageVersion(\"Roxygen\")",
        "Error in packageVersion(\"Roxygen\") : there is no package called ‘Roxygen’\n",
        "> ",
        "packageVersion(\"roxygen\")",
        "Error in packageVersion(\"roxygen\") : there is no package called ‘roxygen’\n",
        "> ",
        "packageVersion(\"roxygen2\")",
        "[1] ‘7.1.1’\n\nRestarting R session...\n\n",
        "> ",
        "library(modgeom)",
        "\nRestarting R session...\n\n",
        "> ",
        "example(bspline_footpoint)",
        "Warning message:\n",
        "In example(bspline_footpoint) :",
        " no help found for ‘bspline_footpoint’\n",
        "> ",
        "load(modgeom)",
        "Error in load(modgeom) : objeto 'modgeom' no encontrado\n",
        "> ",
        "require(\"modgeom\")",
        "Loading required package: modgeom\n",
        "Loading required package: tiff\n",
        "Loading required package: tensorA\n",
        "\nAttaching package: ‘tensorA’\n\n",
        "The following object is masked from ‘package:base’:\n\n    norm\n\n",
        "> ",
        "example(bspline_footpoint)",
        "\nbspln_> #\nbspln_> # tests the projection quality of data points\nbspln_> # onto a spline curve, user defined\nbspln_> #\nbspln_> \nbspln_> # USER PARAMETERS ---------------------------------\nbspln_> require(modgeom)\n\nbspln_> # the positions which are interpolated\nbspln_> position <- seq(from = 0, to = 1, length.out=800)\n\nbspln_> c_point <- t( rbind(c(0,1,2,3,3), c(0,3,3,3,3), c(2,1,1,3,4)) )\n\nbspln_> # the degree\nbspln_> deg <- 3\n\nbspln_> # the number of data points\nbspln_> n_data <- 40\n\nbspln_> # the data points\nbspln_> d_point <- t( rbind( runif(n_data)*(max(c_point[,1])-min(c_point[,1]))+min(c_point[,1]), \nbspln_+                      runif(n_data)*(max(c_point[,2])-min(c_point[,2]))+min(c_point[,2]), \nbspln_+                      runif(n_data)*(max(c_point[,3])-min(c_point[,3]))+min(c_point[,3])) )",
        "\n\nbspln_> # COMPUTATION -------------------------\nbspln_> # generates the interpolation\nbspln_> R1 <- interpolate_bspline(position, c_point, degree = deg)\n\nbspln_> # approximated parameters\nbspln_> s1 <- Sys.time()\n\nbspln_> ap_u <- bspline_footpoint(d_point, c_point, initial.scan.points = 100, \nbspln_+                           degree=deg, step=.2, tolerance=1e-12, verbose=FALSE, \nbspln_+                           algorithm=\"directional\", max.iterations=5000, native = FALSE)\n\nbspln_> s2 <- Sys.time()\n\nbspln_> ss1 <- Sys.time()",
        "\n\nbspln_> ap_u <- bspline_footpoint(d_point, c_point, initial.scan.points = 100, \nbspln_+                           degree=deg, step=.2, tolerance=1e-12, verbose=FALSE, \nbspln_+                           algorithm=\"directional\", max.iterations=5000, native = TRUE)\n\nbspln_> ss2 <- Sys.time()\n\nbspln_> r1 <- s2 - s1\n\nbspln_> r2 <- ss2 - ss1\n\nbspln_> print(paste(\"non-native ** native execution times in seconds: \" ,r1,\" ** \",r2, sep=\"\"))\n[1] \"non-native ** native execution times in seconds: 0.125317573547363 ** 0.00141620635986328\"",
        "\n\nbspln_> Rd <- interpolate_bspline(ap_u, c_point, degree = deg)\n\nbspln_> # TEST PROJECTION QUALITY -----------------------\nbspln_> # perpendicularity at the footpoint\nbspln_> proj_angles <- projection_angles(ap_u, d_point, c_point, degree = deg)\n\nbspln_> print(\"projection angles ***\")\n[1] \"projection angles ***\"\n\nbspln_> print(proj_angles)\n [1] 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000\n[10] 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000",
        "\n[19] 90.00000 93.34910 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000\n[28] 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000 90.00000\n[37] 90.00000 99.46551 90.00000 90.00000\n\nbspln_> # DRAWING -------------\nbspln_> require(rgl)\n",
        "Loading required package: rgl\n",
        "\nbspln_> draw_projs <- function(x, v){\nbspln_+ \nbspln_+   points3d(x, pch=2, col=rgb(0,1,0,0), size = 6)\nbspln_+ \nbspln_+   points3d(v, pch=2, col=rgb(0,1,1,0), size = 6)\nbspln_+ \nbspln_+   for(i in 1:nrow(x))\nbspln_+   lines3d(rbind(x[i,],v[i,]), col=rgb(0,1,1,0), lty=3, lwd=.5)\nbspln_+ \nbspln_+ }\n\nbspln_> plot3d(R1, type=\"l\",\nbspln_+        aspect=FALSE, xlab =\"x\", ylab=\"y\", zlab =\"z\",\nbspln_+        col=rgb(0,0,.3), lwd=2, main = \"cubic spline [clamped]\" )\n\nbspln_> par3d(windowRect=c(184, 130, 813, 666))",
        "\n\nbspln_> #par3d(zoom = 1)\nbspln_> \nbspln_> #draws the control points\nbspln_> points3d(c_point, pch=2, col=rgb(1,0.5,0.5), size = 3)\n\nbspln_> lines3d(c_point, col=rgb(1,0,0), lty=2, lwd=.5)\n\nbspln_> draw_projs(d_point, Rd)\n\nbspln_> readline(prompt=\"Press [enter] to continue\")\n\nRestarting R session...\n\n"
    ]
}